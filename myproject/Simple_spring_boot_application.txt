Creating a simple spring boot application.

http://docs.spring.io/spring-boot/docs/current/reference/html/getting-started-first-application.html

open a terminal to check that you have valid versions of Java and Maven installed.

$ java -version
$ mvn -v

Eclipse > Create an empty maven project , skip archetype selection

Create a POM xml
<groupId>com.example</groupId>
    <artifactId>myproject</artifactId>
    <version>0.0.1-SNAPSHOT</version>

    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>1.4.1.RELEASE</version>
    </parent>

    <!-- Additional lines to be added here... -->
	
	
$mvn package
will give you a working build.

$ mvn dependency:tree
will show the dependency tree

Edit pom.xml and add the spring-boot-starter-web dependency just below the parent section:

<dependencies>
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-web</artifactId>
    </dependency>
</dependencies>

run 
$mvn dependency:tree 
again, you will see that there are now a number of additional dependencies

write code
src/main/java/Example.java:

import org.springframework.boot.*;
import org.springframework.boot.autoconfigure.*;
import org.springframework.stereotype.*;
import org.springframework.web.bind.annotation.*;

@RestController
@EnableAutoConfiguration
public class Example {

    @RequestMapping("/")
    String home() {
        return "Hello World!";
    }

    public static void main(String[] args) throws Exception {
        SpringApplication.run(Example.class, args);
    }

}
The @RestController and @RequestMapping annotations are Spring MVC annotations (they are not specific to Spring Boot).

-  @RestController. This is known as a stereotype annotation.
In this case, our class is a web @Controller so Spring will consider it when handling incoming web requests.

@RequestMapping annotation provides “routing” information. It is telling Spring that any HTTP request with the path “/” should be mapped to the home method. The 

@RestController annotation tells Spring to render the resulting string directly back to the caller.

@EnableAutoConfiguration. This annotation tells Spring Boot to “guess” how you will want to configure Spring, based on the jar dependencies that you have added.

Since spring-boot-starter-web added Tomcat and Spring MVC, the auto-configuration will assume that you are developing a web application and setup Spring accordingly.

Main method is just a standard method that follows the Java convention for an application entry point. 
Our main method delegates to Spring Boot’s SpringApplication class by calling run. 

SpringApplication will bootstrap our application, starting Spring which will in turn start the auto-configured Tomcat web server. We need to pass Example.class as an argument to the run method to tell SpringApplication which is the primary Spring component. 

The args array is also passed through to expose any command-line arguments.

Running the application

mvn spring-boot:run

access localhost:8080/

To create an executable jar, Insert the following lines just below the dependencies section


<build>
    <plugins>
        <plugin>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-maven-plugin</artifactId>
        </plugin>
    </plugins>
</build>

follow by
$ mvn package

to peek the contents, $ jar tvf target/myproject-0.0.1-SNAPSHOT.jar

To run that application, use the java -jar command:

$ java -jar target/myproject-0.0.1-SNAPSHOT.jar



